) %>%
column_to_rownames("ASV")
taxx <- distinct(taxx)
rownames(taxx) <- taxx$ASV
}
taxx <- taxx[,1:which(colnames(taxx) == taxlevel)]
taxx <- distinct(taxx)
taxx <- taxx[!is.na(taxx[,taxlevel]),]
rownames(taxx) <- taxx[,taxlevel]
if(!is.null(ntaxa)){
collapsed <- vapply(split(otts, taxx[,taxlevel]), colSums,
FUN.VALUE = numeric(ncol(otts)))
topX <- names(sort(colSums(collapsed), decreasing = TRUE)[1:ntaxa])
} else {
topX <- colSums(t(otts)) %>%
sort(decreasing = T) %>%
head(n = ntaxa) %>%
names()
}
otts <- otts[rownames(otts) %in% topX,]
if(!is.null(nclust)){
asvclust <- do.tree.asvs.nclust(otts, nclust = nclust, pal.highlight)
} else{
asvclust <- do.tree.asvs(otts)
}
sampclust <- do.tree.samples(otts, sampletip = sampletip, pal.samples, meta = metass)
heatm <- do.heatmap(otts, taxorder = asvclust[[2]], showtaxanames = showtaxanames, sampdata = metass, noclust = ifelse(cluster %in% c("samples", "all"), F, T))
if(cluster == "all"){
return(heatm %>% aplot::insert_left(asvclust[[1]], width = .3) %>%  aplot::insert_top(sampclust, height = .3))
} else if (cluster == "asvs"){
return(heatm %>% aplot::insert_left(asvclust[[1]], width = .3) )
} else if (cluster == "samples"){
return(heatm %>% aplot::insert_top(sampclust, height = .3))
} else if (cluster == "none"){
heatm <- do.heatmap(x, noclust = T)
return(heatm)
}
}
ottts <- htcl(x = tt,taxlevel = "genus",ntaxa = 100,nclust = "auto",pal.highlight = "pokemon",
pal.samples = "pokemon2",sampletip = "facett", cluster = "samples", showtaxanames = F)
ottts
ottts <- htcl(x = tt,taxlevel = "genus",ntaxa = 100,nclust = "auto",pal.highlight = "pokemon",
pal.samples = "pokemon2",sampletip = "facett", cluster = "all", showtaxanames = F)
ottts
ottts <- htcl(x = tt,taxlevel = "genus",ntaxa = 100,nclust = "auto",pal.highlight = "pokemon",
pal.samples = "pokemon2",sampletip = "facett", cluster = "all", showtaxanames = T)
ottts
setGeneric("plot_heatmap", function(x,
taxlevel,
ntaxa,
nclust = NULL,
pal.highlight = "pokemon",
pal.samples = "pokemon2",
sampletip,
cluster = "all",
showtaxanames = T) standardGeneric("plot_heatmap"))
setMethod("plot_heatmap",
signature = "amberobj",
function(x, taxlevel, ntaxa, sampletip, nclust = NULL, cluster = "all", showtaxanames = T, pal.highlight = "pokemon", pal.samples = "pokemon2"){
x <- x@df
value_cols <- c("Abundance", "rel_abundance")
value_col <- "rel_abundance"
taxlevs <- c("domain", "phylum", "class", "order", "family", "genus", "ASV")
taxx <- x[,colnames(x) %in% taxlevs]
taxlevel <- ifelse(is.null(taxlevel), "ASV", taxlevel)
metass <- x[,!colnames(x) %in% c(taxlevs, "OTU", value_cols)]
metass <- distinct(metass)
if(!is.null(taxlevel)){
otts <- x %>%
select(all_of(c("Sample", taxlevel, value_col))) %>%
group_by(!!sym(taxlevel), Sample) %>%
summarise(abundance = sum(.data[[value_col]])) %>%
filter_at(vars(1), all_vars(!is.na(.)))%>%
pivot_wider(
names_from   = all_of("Sample"),
values_from  = all_of("abundance"),
values_fill  = 0       # fills *all* missing combinations with 0
) %>%
column_to_rownames(taxlevel)
taxx <- taxx[,1:which(colnames(taxx) == taxlevel)]
taxx <- distinct(taxx)
taxx <- taxx[!is.na(taxx[,taxlevel]),]
rownames(taxx) <- taxx[,taxlevel]
} else {
otts <- x %>%
select(all_of(c("Sample", "ASV", value_col))) %>%
pivot_wider(
names_from   = all_of("Sample"),
values_from  = all_of(value_col),
values_fill  = 0       # fills *all* missing combinations with 0
) %>%
column_to_rownames("ASV")
taxx <- distinct(taxx)
rownames(taxx) <- taxx$ASV
}
taxx <- taxx[,1:which(colnames(taxx) == taxlevel)]
taxx <- distinct(taxx)
taxx <- taxx[!is.na(taxx[,taxlevel]),]
rownames(taxx) <- taxx[,taxlevel]
if(!is.null(ntaxa)){
collapsed <- vapply(split(otts, taxx[,taxlevel]), colSums,
FUN.VALUE = numeric(ncol(otts)))
topX <- names(sort(colSums(collapsed), decreasing = TRUE)[1:ntaxa])
} else {
topX <- colSums(t(otts)) %>%
sort(decreasing = T) %>%
head(n = ntaxa) %>%
names()
}
otts <- otts[rownames(otts) %in% topX,]
if(!is.null(nclust)){
asvclust <- do.tree.asvs.nclust(otts, nclust = nclust, pal.highlight)
} else{
asvclust <- do.tree.asvs(otts)
}
sampclust <- do.tree.samples(otts, sampletip = sampletip, pal.samples, meta = metass)
heatm <- do.heatmap(otts, taxorder = asvclust[[2]], showtaxanames = showtaxanames, sampdata = metass, noclust = ifelse(cluster %in% c("samples", "all"), F, T))
if(cluster == "all"){
return(heatm %>% aplot::insert_left(asvclust[[1]], width = .3) %>%  aplot::insert_top(sampclust, height = .3))
} else if (cluster == "asvs"){
return(heatm %>% aplot::insert_left(asvclust[[1]], width = .3) )
} else if (cluster == "samples"){
return(heatm %>% aplot::insert_top(sampclust, height = .3))
} else if (cluster == "none"){
heatm <- do.heatmap(x, noclust = T)
return(heatm)
}
}
)
setGeneric("plot_heatmap", function(x,
taxlevel,
ntaxa,
sampletip,
nclust = NULL,
cluster = "all",
showtaxanames = T,
pal.highlight = "pokemon",
pal.samples = "pokemon2") standardGeneric("plot_heatmap"))
setMethod("plot_heatmap",
signature = "amberobj",
function(x, taxlevel, ntaxa, sampletip, nclust = NULL, cluster = "all", showtaxanames = T, pal.highlight = "pokemon", pal.samples = "pokemon2"){
x <- x@df
value_cols <- c("Abundance", "rel_abundance")
value_col <- "rel_abundance"
taxlevs <- c("domain", "phylum", "class", "order", "family", "genus", "ASV")
taxx <- x[,colnames(x) %in% taxlevs]
taxlevel <- ifelse(is.null(taxlevel), "ASV", taxlevel)
metass <- x[,!colnames(x) %in% c(taxlevs, "OTU", value_cols)]
metass <- distinct(metass)
if(!is.null(taxlevel)){
otts <- x %>%
select(all_of(c("Sample", taxlevel, value_col))) %>%
group_by(!!sym(taxlevel), Sample) %>%
summarise(abundance = sum(.data[[value_col]])) %>%
filter_at(vars(1), all_vars(!is.na(.)))%>%
pivot_wider(
names_from   = all_of("Sample"),
values_from  = all_of("abundance"),
values_fill  = 0       # fills *all* missing combinations with 0
) %>%
column_to_rownames(taxlevel)
taxx <- taxx[,1:which(colnames(taxx) == taxlevel)]
taxx <- distinct(taxx)
taxx <- taxx[!is.na(taxx[,taxlevel]),]
rownames(taxx) <- taxx[,taxlevel]
} else {
otts <- x %>%
select(all_of(c("Sample", "ASV", value_col))) %>%
pivot_wider(
names_from   = all_of("Sample"),
values_from  = all_of(value_col),
values_fill  = 0       # fills *all* missing combinations with 0
) %>%
column_to_rownames("ASV")
taxx <- distinct(taxx)
rownames(taxx) <- taxx$ASV
}
taxx <- taxx[,1:which(colnames(taxx) == taxlevel)]
taxx <- distinct(taxx)
taxx <- taxx[!is.na(taxx[,taxlevel]),]
rownames(taxx) <- taxx[,taxlevel]
if(!is.null(ntaxa)){
collapsed <- vapply(split(otts, taxx[,taxlevel]), colSums,
FUN.VALUE = numeric(ncol(otts)))
topX <- names(sort(colSums(collapsed), decreasing = TRUE)[1:ntaxa])
} else {
topX <- colSums(t(otts)) %>%
sort(decreasing = T) %>%
head(n = ntaxa) %>%
names()
}
otts <- otts[rownames(otts) %in% topX,]
if(!is.null(nclust)){
asvclust <- do.tree.asvs.nclust(otts, nclust = nclust, pal.highlight)
} else{
asvclust <- do.tree.asvs(otts)
}
sampclust <- do.tree.samples(otts, sampletip = sampletip, pal.samples, meta = metass)
heatm <- do.heatmap(otts, taxorder = asvclust[[2]], showtaxanames = showtaxanames, sampdata = metass, noclust = ifelse(cluster %in% c("samples", "all"), F, T))
if(cluster == "all"){
return(heatm %>% aplot::insert_left(asvclust[[1]], width = .3) %>%  aplot::insert_top(sampclust, height = .3))
} else if (cluster == "asvs"){
return(heatm %>% aplot::insert_left(asvclust[[1]], width = .3) )
} else if (cluster == "samples"){
return(heatm %>% aplot::insert_top(sampclust, height = .3))
} else if (cluster == "none"){
heatm <- do.heatmap(x, noclust = T)
return(heatm)
}
}
)
ottts <- plot_heatmap(x = tt,taxlevel = "genus",ntaxa = 100,nclust = "auto",pal.highlight = "pokemon",
ottts
ottts <- plot_heatmap(x = tt,taxlevel = "genus",ntaxa = 100,nclust = "auto",pal.highlight = "pokemon",
pal.samples = "pokemon2",sampletip = "facett", cluster = "all", showtaxanames = T)
ottts
ottts <- plot_heatmap(x = tt,taxlevel = "genus",ntaxa = 100,nclust = "auto",pal.highlight = "pokemon",
pal.samples = "pokemon2",sampletip = "treatment", cluster = "all", showtaxanames = T)
ottts
ottts <- plot_heatmap(x = tt,taxlevel = "genus",ntaxa = 100,nclust = "auto",pal.highlight = "pokemon",
pal.samples = "pokemon2",sampletip = "facett", cluster = "samples", showtaxanames = T)
ottts
plot_heatmap(x = tt,taxlevel = "genus",ntaxa = 100,nclust = "auto",pal.highlight = "pokemon",
pal.samples = "pokemon2",sampletip = "facett", cluster = "asvs", showtaxanames = T)
plot_heatmap(x = tt,taxlevel = "genus",ntaxa = 100,nclust = "auto",pal.highlight = "pokemon",
pal.samples = "pokemon2",sampletip = "facett", cluster = "asvs", showtaxanames = F)
plot_heatmap(x = tt,taxlevel = "family",ntaxa = 100,nclust = "auto",pal.highlight = "pokemon",
pal.samples = "pokemon2",sampletip = "facett", cluster = "asvs", showtaxanames = T)
plot_heatmap(x = tt,taxlevel = "family",ntaxa = 10,nclust = "auto",pal.highlight = "pokemon",
pal.samples = "pokemon2",sampletip = "facett", cluster = "asvs", showtaxanames = T)
build()
document()
document()
rlang::last_trace()
document()
document()
document()
load_all()
document()
library(devtools)
load_all()
document()
document()
library(devtools)
load_all()
document()
library(devtools)
document()
library(devtools)
load_all()
document()
build()
ss <- sample_setup("./TestData", patternF = "_L001_R1_001.fastq.gz", patternR = "_L001_R2_001.fastq.gz", nplots = 3)
trimmed <- el_trimmador(ss,
maxEE = c(2, 3),
fwd = "CCTACGGGNGGCWGCAG",
rev = "GACTACNVGGGTWTCTAATCC",
truncLen = c(280, 220),
truncQ = 2,
nplots = 2,
ncores = 1,
primerRemovalMethod = "cutadapt")
final <- mergeAndTaxonomy(trimmed, taxAssignment = "decipher",
taxonomy_file = "~/Desktop/classifiers/dada2/16S/decipher/SILVA_SSU_r138_2019.RData",
metadataFile = NULL, ncores = 3)
load_all()
setClass("finalObject",
slots = list(
psobj = "phyloseq",
stats = "data.frame"
)
)
final <- mergeAndTaxonomy(trimmed, taxAssignment = "decipher",
taxonomy_file = "~/Desktop/classifiers/dada2/16S/decipher/SILVA_SSU_r138_2019.RData",
metadataFile = NULL, ncores = 3)
library(devtools)
load_all()
library(devtools)
load_all()
final <- mergeAndTaxonomy(trimmed, taxAssignment = "decipher",
taxonomy_file = "~/Desktop/classifiers/dada2/16S/decipher/SILVA_SSU_r138_2019.RData",
metadataFile = NULL, ncores = 3)
ss <- sample_setup("./TestData", patternF = "_L001_R1_001.fastq.gz", patternR = "_L001_R2_001.fastq.gz", nplots = 3)
trimmed <- el_trimmador(ss,
maxEE = c(2, 3),
fwd = "CCTACGGGNGGCWGCAG",
rev = "GACTACNVGGGTWTCTAATCC",
truncLen = c(280, 220),
truncQ = 2,
nplots = 2,
ncores = 1,
primerRemovalMethod = "cutadapt")
final <- mergeAndTaxonomy(trimmed, taxAssignment = "decipher",
taxonomy_file = "~/Desktop/classifiers/dada2/16S/decipher/SILVA_SSU_r138_2019.RData",
metadataFile = NULL, ncores = 3)
final
cr <- count_reads(final)
ss <- sample_setup("./TestData", patternF = "_L001_R1_001.fastq.gz", patternR = "_L001_R2_001.fastq.gz", nplots = 3)
library(devtools)
load_all()
ss <- sample_setup("./TestData", patternF = "_L001_R1_001.fastq.gz", patternR = "_L001_R2_001.fastq.gz", nplots = 3)
trimmed <- el_trimmador(ss,
maxEE = c(2, 3),
fwd = "CCTACGGGNGGCWGCAG",
rev = "GACTACNVGGGTWTCTAATCC",
truncLen = c(280, 220),
truncQ = 2,
nplots = 2,
ncores = 1,
primerRemovalMethod = "cutadapt")
final <- merge_and_taxonomy(trimmed, taxAssignment = "decipher",
taxonomy_file = "~/Desktop/classifiers/dada2/16S/decipher/SILVA_SSU_r138_2019.RData",
metadataFile = NULL, ncores = 3)
final
cr <- count_reads(final)
final
final <- mergeAndTaxonomy(trimmed, taxAssignment = "decipher",
taxonomy_file = "~/Desktop/classifiers/dada2/16S/decipher/SILVA_SSU_r138_2019.RData",
metadataFile = NULL, ncores = 3)
#' Function to merge reads and assign taxonomy.
#'
#' @param x A "filteredSamples" object.
#' @param taxAssignment The method to assign the taxonomy.
#' @param taxonomy_file The file containing the taxonomy.
#' @param metadataFile The file with metadata.
#' @param ncores Number of processors to use. For Windows is 1.
#'
#' @return A finalObject object.
#' @export
setGeneric("mergeAndTaxonomy", function(x,
taxAssignment = "decipher",
taxonomy_file,
metadataFile = NULL,
ncores = NULL)
standardGeneric("mergeAndTaxonomy"))
setMethod("mergeAndTaxonomy",
signature("filteredSamples"),
function(x,
taxAssignment = "decipher",
taxonomy_file,
metadataFile = NULL,
ncores = NULL) {
if (is.null(ncores)) {
nproc <- 1
} else {
nproc <- ncores
}
message("Learning errors...")
errF <-
dada2::learnErrors(x@samples$fwd, nbases = 1e8, multithread = nproc)
errR <-
dada2::learnErrors(x@samples$rev, nbases = 1e8, multithread = nproc)
mergers <- vector("list", length(x@samples$sample_name))
names(mergers) <- x@samples$sample_name
message("Merging pairs...")
dadaF <- list()
dadaR <- list()
nsam <- 1
for (sam in x@samples$sample_name) {
cat("--> Processing:",
sam,
"(",
nsam,
"/",
length(x@samples$sample_name),
")",
"\n")
nsam <- nsam + 1
derepF <-
dada2::derepFastq(x@samples[x@samples$sample_name == sam, "fwd"])
ddF <- dada2::dada(derepF, err = errF, multithread = nproc)
dadaF[[sam]] <- ddF
derepR <-
dada2::derepFastq(x@samples[x@samples$sample_name == sam, "rev"])
ddR <- dada2::dada(derepR, err = errR, multithread = nproc)
dadaR[[sam]] <- ddR
merger <- dada2::mergePairs(ddF, derepF, ddR, derepR)
mergers[[sam]] <- merger
}
getN <- function(x)
sum(dada2::getUniques(x))
seqtab <- dada2::makeSequenceTable(mergers)
message("Removing chimeras...")
seqtab.nochim <-
dada2::removeBimeraDenovo(seqtab, method = "consensus", multithread = nproc)
message("Assigning taxonomy...")
dna <-
Biostrings::DNAStringSet(dada2::getSequences(seqtab.nochim)) # Create a DNAStringSet from the ASVs
load(taxonomy_file) # CHANGE TO THE PATH OF YOUR TRAINING SET
if (is.null(ncores)) {
nproc <- detectCores() - 1
} else {
nproc <- ncores
}
ids <-
DECIPHER::IdTaxa(
dna,
trainingSet,
strand = "top",
processors = nproc,
verbose = FALSE
) # use all processors
ranks <-
c("domain",
"phylum",
"class",
"order",
"family",
"genus",
"species") # ranks of interest
# Convert the output object of class "Taxa" to a matrix analogous to the output from assignTaxonomy
taxid <- t(sapply(ids, function(x) {
m <- match(ranks, x$rank)
taxa <- x$taxon[m]
taxa[startsWith(taxa, "unclassified_")] <- NA
taxa
}))
message("preparing the final object...")
colnames(taxid) <- ranks
rownames(taxid) <- dada2::getSequences(seqtab.nochim)
saveRDS(seqtab.nochim, "seqtab_nochim.RData")
saveRDS(taxid, "taxonomy.RData")
if (!is.null(metadataFile)) {
meta <- as.data.frame(read.csv(metadataFile))
rownames(meta) <- meta[, "Sample_ID"]
ps <-
phyloseq::phyloseq(
phyloseq::otu_table(seqtab.nochim, taxa_are_rows = FALSE),
phyloseq::sample_data(meta),
phyloseq::tax_table(taxid)
)
} else {
ps <-
phyloseq::phyloseq(
phyloseq::otu_table(seqtab.nochim, taxa_are_rows = FALSE),
phyloseq::tax_table(taxid)
)
}
message("tracking stats...")
track <-
as.data.frame(cbind(
x@stats,
sapply(dadaF, getN),
sapply(dadaR, getN),
sapply(mergers, getN),
rowSums(seqtab.nochim)
))
colnames(track) <-
c("input",
"filtered",
"denoisedF",
"denoisedR",
"merged",
"nonchim")
track$finalPerc <- 100 * track[, "nonchim"] / track[, "input"]
rownames(track) <- x@samples$sample_name
x <- phyloseq::psmelt(ps)
tax <- x %>% select(domain:genus)
nums <- vector()
for(i in colnames(tax)){
nums[[i]] <- tax[,i] %>%
unique() %>%
length()
}
nums <- unlist(nums)
nums[7] <- x$OTU %>%
unique() %>%
length()
nums[8] <- x$Sample %>%
unique() %>%
length()
names(nums) <- c("domains", "phyla", "classes", "orders", "families", "genera", "ASVs", "samples")
new("amberobj", df = x, stats = nums, clusteringstats = track)
})
final <- mergeAndTaxonomy(trimmed, taxAssignment = "decipher",
taxonomy_file = "~/Desktop/classifiers/dada2/16S/decipher/SILVA_SSU_r138_2019.RData",
metadataFile = NULL, ncores = 3)
build()
library(dplyr)
final <- mergeAndTaxonomy(trimmed, taxAssignment = "decipher",
taxonomy_file = "~/Desktop/classifiers/dada2/16S/decipher/SILVA_SSU_r138_2019.RData",
metadataFile = NULL, ncores = 3)
library(devtools)
load_all()
document()
library(devtools)
load_all()
load_all()
document()
pkgload::dev_help('do.heatmap,amberobj-method')
document()
library(devtools)
load_all()
document()
build()
build()
getwd()
install_github(AldoDale/AMBER)
install_github("AldoDale/AMBER")
package_version(AMBER)
package_version("AMBER")
package.version("AMBER")
package_info("AMBER")
usethis::use_version()
setwd("./AMBER/")
usethis::use_version()
rlang::last_trace()
library(usethis)
create_package()
create_package(./)
create_package("./")
create_package("./")
